@page "/gestational-age"

@using System.Globalization

<PageTitle>Idade Gestacional Corrigida</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudGrid Justify="Justify.SpaceEvenly">
            <MudItem xs="12" md="6">
                <MudDatePicker Date="BirthDate" DateChanged="FillDaysSinceBirthday" Label="Data de Nascimento"
                    MaxDate="@DateTime.Today.Date" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="DaysSinceBirthday" @bind-Value:after="FillBirthDate"
                    Label="Dias desde o nascimento" Min="0" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="GestationalWeeks" Label="Idade Gestacional (Semanas)" Min="0" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="GestationalDays" Label="Idade Gestacional (Dias)" Min="0" />
            </MudItem>

            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CalculateCorrectedGestationalAge">
                    Calcular Idade Gestacional Corrigida
                </MudButton>
            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.h6">
                    Idade Gestacional Corrigida:<br />
                    <MudHighlighter Text="@Result" HighlightedText="@Result" />
                </MudText>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    [Inject] IGestationalAgeService GestationalAgeService { get; set; } = null!;

    private DateTime? BirthDate { get; set; }
    private int DaysSinceBirthday { get; set; }
    private int GestationalWeeks { get; set; }
    private int GestationalDays { get; set; }
    private string Result { get; set; } = string.Empty;

    private void CalculateCorrectedGestationalAge()
    {
        Result = "Data de nascimento inválida";
        if (BirthDate.HasValue)
        {
            var gestacionalAge = new GestacionalAgeParams()
                {
                    GestationalWeeks = GestationalWeeks,
                    GestationalDays = GestationalDays,
                    BirthDate = BirthDate.Value!
                };

            var result = GestationalAgeService.GetCorrectAge(gestacionalAge);
            Result = result.DisplayResult();
        }
    }

    private async Task FillDaysSinceBirthday(DateTime? value)
    {
        BirthDate = value;

        if (BirthDate == DateTime.MinValue)
            return;

        var daysSinceBirthday = (int)(DateTime.Today.Date - BirthDate!.Value.Date).TotalDays;
        if (daysSinceBirthday != DaysSinceBirthday)
        {
            DaysSinceBirthday = daysSinceBirthday;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task FillBirthDate()
    {
        var birthDate = DateTime.Today.AddDays(-DaysSinceBirthday);
        if (birthDate.Date != BirthDate.GetValueOrDefault().Date)
        {
            BirthDate = birthDate;
            await InvokeAsync(StateHasChanged);
        }
    }
}
