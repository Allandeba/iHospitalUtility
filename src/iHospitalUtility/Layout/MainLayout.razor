@inherits LayoutComponentBase

<MudThemeProvider
    @ref="_mudThemeProvider"
    @bind-IsDarkMode="_isDarkMode"
    Theme="Configuration.Theme"/>
<MudPopoverProvider />

<MudDialogProvider />

<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>
        <MudIconButton
            Icon="@Icons.Material.Filled.Menu"
            Color="Color.Inherit"
            Edge="Edge.Start"
            OnClick="ToggleDrawer"/>
            iHospitalUtility

        <MudSpacer />

        <MudMenu Icon="@GetThemeIcon()" Color="Color.Inherit">
            <MudMenuItem OnClick="() => SetTheme(EThemeType.Light)">
                <MudIcon Icon="@Icons.Material.Rounded.LightMode" Class="me-2" />Light
            </MudMenuItem>

            <MudMenuItem OnClick="() => SetTheme(EThemeType.Dark)">
                <MudIcon Icon="@Icons.Material.Rounded.DarkMode" Class="me-2" />Dark
            </MudMenuItem>
            
            <MudMenuItem OnClick="() => SetTheme(EThemeType.System)">
                <MudIcon Icon="@Icons.Material.Rounded.BrightnessAuto" Class="me-2" />Auto
            </MudMenuItem>
        </MudMenu>
    </MudAppBar>

    <MudDrawer @bind-Open="_isDrawerOpened">
        <NavMenu />
    </MudDrawer>

    <MudMainContent>
        <MudContainer Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [Inject] ILocalStorageRepository LocalStorage { get; set; } = null!;

    private bool _isDrawerOpened;
    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider = null!;
    private EThemeType _selectedTheme { get; set; } = EThemeType.System;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitTheme();
        }
    }

    private async Task InitTheme()
    {
        var cachedTheme = await LocalStorage.GetItemAsync<int>(CacheConstants.SelectedTheme);
        await SetTheme((EThemeType)cachedTheme);
    }

    private async Task SetTheme(EThemeType theme)
    {
        _selectedTheme = theme;
        _isDarkMode = _selectedTheme == EThemeType.Dark;

        if (_selectedTheme == EThemeType.System)
            await SetSystemTheme();

        await LocalStorage.SetItemAsync(CacheConstants.SelectedTheme, _selectedTheme);

        await InvokeAsync(StateHasChanged);
    }

    private async Task SetSystemTheme()
    {
        _isDarkMode = await _mudThemeProvider.GetSystemPreference();
        await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        await InvokeAsync(StateHasChanged);
    }

    private void ToggleDrawer()
        => _isDrawerOpened = !_isDrawerOpened;

    private string GetThemeIcon() =>
        _selectedTheme switch {
            EThemeType.Light => Icons.Material.Filled.LightMode,
            EThemeType.Dark => Icons.Material.Filled.DarkMode,
            _ => Icons.Material.Filled.BrightnessAuto
        };
}